import logging
import requests
from fastapi import APIRouter
from fastapi.requests import Request
from fastapi.responses import JSONResponse
from app.api.schemas import ApplicationData
from app.bot.create_bot import bot
from app.api.dao import ApplicationDAO, UserDAO, CityDAO
from app.bot.keyboards.kbs import main_keyboard
from app.config import settings

router = APIRouter(prefix='/api', tags=['API'])
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

@router.post("/application", response_class=JSONResponse)
async def create_appointment(request: Request):
    # –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
    data = await request.json()
    validated_data = ApplicationData(**data)
    city_id, city_name = validated_data.city.split('_')
    application_type, application_type_name = validated_data.application_type.split('/')

    # —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    message = (
        f"üéâ <b>{validated_data.name}, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
        "üí¨ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ:</b>\n"
        f"üèô<b>–ì–æ—Ä–æ–¥:</b> {city_name}\n"
        f"‚úâÔ∏è<b>–¢–∏–ø –∑–∞—è–≤–∫–∏:</b> {application_type_name}\n"
        f"üìÑ<b>–ó–∞—è–≤–∫–∞:</b> {validated_data.application_text}\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–≥–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞! ‚ú® –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫."
    )

    # —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    admin_message = (
        "üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>\n\n"
        "üìï <b>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:</b>\n"
        f"üë§ <b>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:</b> {validated_data.name}\n"
        f"üìû<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {validated_data.contact}\n"
        f"üèô<b>–ì–æ—Ä–æ–¥:</b> {city_name}\n"
        f"‚úâÔ∏è<b>–¢–∏–ø –∑–∞—è–≤–∫–∏:</b> {application_type_name}\n"
        f"üìÑ<b>–ó–∞—è–≤–∫–∞:</b> {validated_data.application_text}\n"
    )

    # –∑–∞–ø–∏—Å—å –∑–∞—è–≤–∫–∏ –≤ –ë–î
    await ApplicationDAO.add(
        user_id=validated_data.user_id,
        city_id=city_id,
        client_name=validated_data.name,
        contact=validated_data.contact,
        application_text=validated_data.application_text,
        application_type=application_type
    )
    user = await UserDAO.find_one_or_none(telegram_id=validated_data.user_id)
    admin = await UserDAO.find_one_or_none(telegram_id=settings.ADMIN_ID)
    kb = main_keyboard(user_id=validated_data.user_id, first_name=validated_data.name, phone_number=user.phone_number)
    adminkb = main_keyboard(user_id=admin.telegram_id, first_name=admin.first_name, phone_number=admin.phone_number)
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç—É, –∞–¥–º–∏–Ω—É –∏ –±–æ—Ç—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await bot.send_message(chat_id=validated_data.user_id, text=message, reply_markup=kb)
    await bot.send_message(chat_id=settings.ADMIN_ID, text=admin_message, reply_markup=adminkb)
    try:
        url =f'{settings.INFOBASE_SITE}/telegram/applications/'
        headers = {'Content-Type': 'application/json'}
        data = {
            'telegram_id': user.telegram_id,
            'city_name': city_name,
            'phone_number': validated_data.contact,
            'application_text':validated_data.application_text,
            'application_type':application_type
        }
        response = requests.post(url=url, headers=headers, json=data)
        logging.info(f'–ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {response.status_code}, –û—Ç–≤–µ—Ç: {response.json()["response"]}')
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞: {e}')

    return {"message": "success!"}

@router.get("/phone_number", response_class=JSONResponse)
async def get_phone_number(request: Request, user_id:int=None):
    # –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ —Å –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—á–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—á–∫—É —Ñ–æ—Ä–º—ã
    user = await UserDAO.find_one_or_none(telegram_id=user_id)
    phone_number = user.phone_number if user else "no user"

    return {"phone_number": phone_number}
